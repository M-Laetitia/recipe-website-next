# Indique à CircleCI la version de configuration utilisée
version: 2.1

# Import d’un “orb” : un module réutilisable CircleCI pour Node.js
orbs:
  node: circleci/node@5.1.1
    # Fournit des commandes préconfigurées comme `node/install`, `node/install-packages`
  github-cli: circleci/github-cli@2.0
  lighthouse-check: foo-software/lighthouse-check@0.0.13

# Définition d’un job : un ensemble d’étapes exécutées dans un environnement donné
jobs:
  # Job pour exécuter les tests
  build-and-test:
    docker:
    # Premier conteneur Docker principal : Node.js (ici cimg/node:20.1)
      - image: cimg/node:20.1
      # Cette image contient une version moderne de Node.js, utilisée pour ton projet Next.js
       # Deuxième conteneur : MongoDB, utilisé comme service pour exécuter les tests
      - image: mongo:5.0
       # Conteneur Mongo officiel – version 5.0 (à adapter si besoin)

    # Variables d’environnement injectées dans les deux conteneurs
    environment:
      MONGODB_URI: mongodb://localhost:27017/myproject_test
       #  pointe vers la base de données MongoDB qui est lancée dans le deuxième conteneur Docker (mongo:5.0) défini dans la configuration.
      NODE_ENV: test
      # Permet à ton code de savoir qu’il tourne en environnement de test
      # La variable MONGODB_URI sera utilisée par ton ORM ou client MongoDB

    # Étapes à exécuter dans ce job
    steps:
      - checkout
      # Clone ton dépôt Git dans le conteneur
      - node/install
      # Installe Node.js via l’orb, en se basant sur `.nvmrc` ou `package.json` si précisé
      - restore_cache:
          keys:
            - deps-{{ checksum "package-lock.json" }}
            - deps-
            # Essaie de restaurer un cache existant des dépendances Node.js pour accélérer le build
        # `{{ checksum "package-lock.json" }}` permet de valider que c’est bien le même jeu de dépendances

      - node/install-packages
      # Lance automatiquement `npm install` ou `yarn install` selon le lockfile détecté

      # Audit de sécurité
      - run:
          name: Security audit
          command: |
            echo "Vérification des vulnérabilités de sécurité..."
            npm audit --audit-level=moderate

      # TypeScript check 
      - run:
          name: TypeScript type check
          command: |
            if [ -f "tsconfig.json" ]; then
              echo "Vérification des types TypeScript..."
              npm run type-check
            else
              echo "TypeScript non configuré, étape ignorée"
            fi
      # Lint test
      - run:
          name: Lint code (strict)
          command: |
            echo " Analyse du code (mode strict)..."
            npm run lint -- --max-warnings=0
      
          
      - save_cache:
          paths:
            - node_modules
          key: deps-{{ checksum "package-lock.json" }}
          # Sauvegarde le cache des dépendances après installation pour les prochaines exécutions
      - run:
          name: Wait for MongoDB
          command: |
            for i in `seq 1 20`; do
              nc -z localhost 27017 && echo "MongoDB is up!" && break
              echo "Waiting for MongoDB..."
              sleep 2
            done
        # Attente active : vérifie toutes les 2 secondes pendant 40s que MongoDB est bien lancé
        # Important car sinon les tests peuvent échouer si Mongo n’est pas prêt
      - run:
          name: Run Tests
          command: npm run test
        # Exécute les tests définis dans le script `"test"` de ton package.json
        # Ces tests doivent se connecter à la base MongoDB via MONGODB_URI

  # Job pour lighthouse-audit
  lighthouse-audit:
    docker:
      - image: cimg/node:20.1
    steps:
      - checkout
      - lighthouse-check/audit:
          urls: 'https://recipe-website-next-three.vercel.app'

  # Job pour lighthouse-validate-status
  lighthouse-validate:
    docker:
      - image: cimg/node:20.1
    steps:
      - checkout
      - lighthouse-check/validate-status:
          minAccessibilityScore: '60'
          minPerformanceScore: '90'
          minSeoScore: '50'


  # Job spécifique pour créer une PR de dev vers test
  create-pr-dev-to-test:
    docker:
      - image: cimg/base:2023.03
      # Utilise une image Docker de base de CircleCI, suffisante pour exécuter des scripts shell simples. Pas besoin ici de Node ou Mongo, car ce job ne fait que créer une Pull Request.
    steps:
      - checkout
      # clone le dépôt GitHub dans l’environnement.
      - github-cli/setup
      #  installe l’outil en ligne de commande GitHub CLI (gh) pour interagir avec GitHub via script.
      - run:
          name: Verify GitHub authentication  
          command: gh auth status
          # Vérifie l’état de l’authentification GitHub : indispensable pour pouvoir créer une PR automatiquement.
      
      - run: 
          name: Create PR from dev to test
          # Double vérification que l’auth est fonctionnelle (surtout utile en debug ou première config).
          # Vérifie s’il y a déjà une PR ouverte allant de dev vers test.
          # Si aucune PR n’existe encore, on en crée une automatiquement :
          command: |
           echo "Authentification GitHub"
            gh auth status

            echo "Recherche de PR existantes dev -> test"
            existing_pr_count=$(gh pr list --state open --base test --head dev --json number -q '.[].number' | wc -l)
            echo "Nombre de PRs existantes: $existing_pr_count"

            if [ "$existing_pr_count" -eq 0 ]; then
              echo "Création de la PR dev → test..."
              gh pr create --base test --head dev \
                --title "Merge dev into test" \
                --body "Cette PR a été automatiquement créée par le pipeline CI/CD après que les tests aient réussi."
            else
              echo "Une PR existe déjà entre dev et test. Pas de nouvelle PR créée."
            fi

  # Job spécifique pour créer une PR de test vers master
  create-pr-test-to-master:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - github-cli/setup
      - run:
        # Configure Git dans l’environnement pour éviter les warnings.
        # Définit manuellement l’URL du dépôt (nécessaire ici à cause d’un bug ou comportement dans CircleCI).
        # Force le fetch des branches test et master pour s’assurer que gh pr create voit bien les commits.
        # /!\ idéalement créer des variables d'environnement pour le repo
        # git remote set-url origin https://github.com/M-Laetitia/recipe-website-next.git
          name: Setup Git and Fetch All Branches
          command: |
            git config --global --add safe.directory /root/project
            git remote set-url origin "$CIRCLE_REPOSITORY_URL"
            git fetch origin test master --update-head-ok
            git fetch --all --prune
      - run:
          name: Create PR from test to master
          # Utilise jq pour compter le nombre de PR ouvertes de test → master.
          # Crée une PR automatiquement si aucune n’existe.
          command: |
            echo "Checking for existing PR..."
            existing_pr=$(gh pr list --state open --base master --head test --json number | jq length)
            echo "Number of existing PRs: $existing_pr"

            if [ "$existing_pr" -eq 0 ]; then
              echo "Creating PR from test to master"
              gh pr create --base master --head test \
                --title "Merge test into master" \
                --body "This PR was automatically created by the CI/CD pipeline after tests passed."
            else
              echo "A PR already exists between test and master. No new PR created."
            fi

  # Job pour déployer sur Vercel
  deploy-to-vercel:
    docker:
      - image: cimg/node:20.1
      # Environnement Node.js requis pour exécuter des builds et le CLI Vercel.
    steps:
    - checkout
    - node/install
    - node/install-packages

    # Masquer les variables sensibles dans les logs CircleCI 
    # Masquage des valeurs : Avant d'écrire chaque variable dans le fichier .env, utilisation de "::add-mask::$VAR" pour masquer la valeur dans les logs.
    - run:
        name: Create secure .env file
        command: |
          echo "::add-mask::$CLERK_SECRET_KEY"
          echo "::add-mask::$CLERK_PUBLISHABLE_KEY"
          echo "::add-mask::$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"
          echo "::add-mask::$NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME"
          echo "::add-mask::$VERCEL_TOKEN"
          {
            echo "CLERK_SECRET_KEY=$CLERK_SECRET_KEY"
            echo "CLERK_PUBLISHABLE_KEY=$CLERK_PUBLISHABLE_KEY" 
            echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"
            echo "NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=$NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME"
          } > .env
          
          echo "Fichier .env créé avec succès (valeurs masquées)"

    - run:
        name: Build project locally
        command: npm run build
        # Important : construit le site en local pour s’assurer que les variables d’environnement sont bien prises en compte

    - run:
        name: Install Vercel CLI
        command: npm install -g vercel

    - run:
        name: Deploy to Vercel
        command: |
          echo "Deploying to Vercel..."
          vercel --prod --token ${VERCEL_TOKEN} --yes

    
workflows:
  version: 2
  ci-cd-pipeline:
    jobs:
      # Workflow pour la branche dev
      # Déclare le pipeline global qui coordonne l’ordre d’exécution des jobs selon la branche.
      - build-and-test:
          name: test-dev
          filters:
            branches:
              only: dev
            # Lance les tests quand push sur dev.

      - create-pr-dev-to-test:
          requires:
            - test-dev
          filters:
            branches:
              only: dev
      # Si les tests passent, crée automatiquement une PR de dev vers test.

      # Workflow pour la branche test
      - build-and-test:
          name: test-test
          filters:
            branches:
              only: test
      - lighthouse-audit:
          requires:
            - test-test
          filters:
            branches:
              only: test
      - lighthouse-validate:
          requires:
            - lighthouse-audit
          filters:
            branches:
              only: test
      - create-pr-test-to-master:
          requires:
            - test-test
          filters:
            branches:
              only: test

      # Workflow pour la branche master
      - build-and-test:
          name: test-master
          filters:
            branches:
              only: master
      - deploy-to-vercel:
          requires:
            - test-master
          filters:
            branches:
              only: master



# + deploy require bluid and test
# Juste ci pas de cd

# on push sur dev ou pull request vers dev
# lint > estlint + test 
# pull request de dev vers test + ci obligatoire revue de code possible avec la pull resquest (git) puis fusion manuelle si tout se passe bien c'est ici qu'on valide
# la branche test que du code véfiié
# puis fusion vers main pull request

# début test unitaire puis avant de main test end to end 

# puis déploiement auto sur vercel

# push dev
# dev
# pull resquet avect test
# branche test
# pull request avec main

#ajuste un ci pas un cd, pipeline check si les test passent avant tout déploiement
# > faire en sorte que les tests se fassent sur l'env. test 